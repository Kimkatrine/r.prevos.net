#+TITLE: Remake of 3D Monster Maze in the R Language for Statistical Computing
#+PROPERTY: header-args:R :session *R-3dmaze* :results value raw :exports results :tangle 3d_Monster_Maze.r

* Introduction
This remake is heavily based on the work by [[http://softtangouk.wixsite.com/soft-tango-uk/3d-monster-maze][SoftTango]] from the United Kingdom. Also the [[http://www.zx-gaming.co.uk/games/monstermaze/default.htm][online game]] has helped to recreate this classic of leisure computing.

Steps:
1. Generate the maze
2. 2-dimensional game play
3. Add graphics

* Generate the Maze
The maze is semi-randomised. Refer to the SoftTango description for details.

** The drill
The first lines of code generate a matrix that holds the maze. The =print.board= function converts the maze to console output that is easier to read. 

The tunnels are created by simulating a drill. The algorithm starts in the lower-right corner and drills tunnels in random directions through the maze. The code checks for the borders and ensures that no two by two areas are empty. The tunnelling continues until the total planned drilling length hits 800. This method ensures that the maze has a realistic feel and that there are no areas that are inaccessible for the player or the monster.

#+BEGIN_SRC R
## Fill maze with blocks
maze <- matrix(nrow = 18, ncol = 17)
maze[, ] <- "#"

## Print Maze
print_board <- function(board) {
    nr <- nrow(board)
    nc <- ncol(board)
    v <- paste(as.vector(t(board)), collapse = "")
    for (i in 1:nr)
        print(substr(v, (i - 1) * nc + 1, (i - 1) * nc + nc))
}

## Generate maze
path <- 0
x <- 16
y <- 17

while(path < 800) {
    direction <- rep(0, 2) # Reset directions (two dimensons)
    direction[sample(1:2, 1)] <- sample(c(-1, 1), 1) # Random direction    
    passage <- sample(1:6, 1) # Random Length of passage
    for (i in 1:passage) {
        maze[y, x] <- " "
        ## Set temp location to check impact
        xt <- x + direction[1]
        yt <- y + direction[2]
        ## Border test
        if (xt != 1 & xt != 17 & yt != 1 & yt != 18) {
            path <- path + 1
            ## Cavern test
            tile <- maze[yt, xt]
            maze[yt, xt] <- " "
            if (sum(maze[(yt - 1):yt, (xt - 1):xt] == " ") != 4 &
                sum(maze[(yt - 1):yt, xt:(xt + 1)] == " ") != 4 &
                sum(maze[yt:(yt + 1), (xt - 1):xt] == " ") != 4 &
                sum(maze[yt:(yt + 1), xt:(xt + 1)] == " ") != 4) {
                # Move drill
                x <- xt
                y <- yt
            } else maze[yt, xt] <- tile
        }
    }        
}
#+END_SRC

The output of this routine looks like below. R is the T-rex, H is the exit to go home and the chevron indicates the player and its direction. 

#+BEGIN_SRC 
[1] "#################"
[1] "#               #"
[1] "## # # #### ### #"
[1] "#           ### #"
[1] "# ## ## ###     #"
[1] "#       ### ### #"
[1] "# ### # ### ### #"
[1] "#       ###     #"
[1] "# # ###     ### #"
[1] "# # ### ### ### #"
[1] "#               #"
[1] "# # ## # ### ## #"
[1] "# # ## # ###    #"
[1] "#            ## #"
[1] "# #### ### #    #"
[1] "#      ### # ## #"
[1] "# ####          #"
[1] "#################"
#+END_SRC

The next step is to insert the T-Rex, the player and to place the exit.

** Rex, the exit and the player
#+BEGIN_SRC R
## Locate exit
tile <- "#"
while (tile == "#") {
    x <- sample(2:16, 1)
    y <- sample(2:7, 1)
    tile <- maze[y, x]
}
maze[y, x] <- "H"

tile <- "#"
while (tile == "#") {
    x <- sample(2:16, 1)
    y <- sample(2:5, 1)
    tile <- maze[y, x]
}
maze[y, x] <- "R"

place_player <- function(x, y, compass) {
    tokens <- c("^", ">", "V", "<")
    maze[y, x] <<- tokens[which(compass == c("N", "E", "S", "W"))]
}

place_player(16, 17, ifelse(maze[16, 16] != "#", "N", "W"))

print_board(maze)
#+END_SRC
